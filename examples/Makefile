## Manage what image of each examples to run
##
## Default:
##   make deploy-xdp
##     quay.io/bpfman-bytecode/go-xdp-counter:latest
##     quay.io/bpfman-userspace/go-xdp-counter:latest
##
## Example: Override the upstream tag
##   make deploy-tc TAG=v0.5.6
##     quay.io/bpfman-bytecode/go-tc-counter:v0.5.6
##     quay.io/bpfman-userspace/go-uc-counter:v0.5.6
##
## Example: Run from private image
##   make deploy-tracepoint IMAGE_TP_US=quay.io/$QUAY_USER/tracepoint-userspace:test \
##                          IMAGE_TP_BC=quay.io/$QUAY_USER/tracepoint-bytecode:test
##     quay.io/$QUAY_USER/tracepoint-bytecode:test
##     quay.io/$QUAY_USER/tracepoint-userspace:test
##
## Example: Override the upstream tag on all images
##   make deploy TAG=v0.5.6
##     quay.io/bpfman-bytecode/go-tc-counter:v0.5.6
##     quay.io/bpfman-userspace/go-uc-counter:v0.5.6
##     quay.io/bpfman-bytecode/go-tracepoint-counter:v0.5.6
##     quay.io/bpfman-userspace/go-tracepoint-counter:v0.5.6
##     quay.io/bpfman-bytecode/go-xdp-counter:v0.5.6
##     quay.io/bpfman-userspace/go-xdp-counter:v0.5.6
##     quay.io/bpfman-userspace/go-app-counter:v0.5.6
##     :
##

# VERSION defines the project version for the bundle.
# Update this value when you upgrade the version of your project.
# To re-generate a bundle for another specific version without changing the standard setup, you can:
# - use environment variables to overwrite this value (e.g export VERSION=0.5.6)
VERSION ?= 0.5.6

.DEFAULT_GOAL := help

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

# Setting SHELL to bash allows bash commands to be executed by recipes.
# Options are set to exit when a recipe line exits non-zero or a piped command fails.
SHELL = /usr/bin/env bash -o pipefail
.SHELLFLAGS = -ec

.PHONY: all
all: build

##############################################################
##@ General
##############################################################

# The help target prints out all targets with their descriptions organized
# beneath their categories. The categories are represented by '##@' and the
# target descriptions by '##'. The awk commands is responsible for reading the
# entire set of makefiles included in this invocation, looking for lines of the
# file as xyz: ## something, and then pretty-format the target and help. Then,
# if there's a line with ##@ something, that gets pretty-printed as a category.
# More info on the usage of ANSI control characters for terminal formatting:
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
# More info on the awk command:
# http://linuxcommand.org/lc3_adv_awk.php

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n  make \033[36mdeploy\033[0m TAG=v0.2.0\n  make \033[36mdeploy-xdp\033[0m IMAGE_XDP_US=quay.io/user1/go-xdp-counter-userspace:test\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
	@$(foreach target,$(PROGRAM_TARGETS), \
		printf "  \033[36m%-23s\033[0m Deploy $(target) to the cluster\n" "deploy-$(target)"; \
		printf "  \033[36m%-23s\033[0m Deploy $(target) to the cluster (SELinux)\n" "deploy-$(target)-selinux"; \
		printf "  \033[36m%-23s\033[0m Undeploy $(target) from the cluster\n" "undeploy-$(target)"; \
		printf "  \033[36m%-23s\033[0m Undeploy $(target) from the cluster (SELinux)\n" "undeploy-$(target)-selinux";)

##############################################################
##@ Local Dependencies
##############################################################

ignore-not-found ?= false

## Location to install dependencies to
LOCALBIN ?= $(shell pwd)/bin
$(LOCALBIN):
	mkdir -p $(LOCALBIN)

## Tool Binaries
KUSTOMIZE ?= $(LOCALBIN)/kustomize

## Tool Versions
KUSTOMIZE_VERSION ?= v3.8.7

KUSTOMIZE_INSTALL_SCRIPT ?= "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
.PHONY: kustomize
kustomize: $(KUSTOMIZE) ## Download kustomize locally if necessary.
$(KUSTOMIZE): $(LOCALBIN)
	test -s $(LOCALBIN)/kustomize || { curl -Ss $(KUSTOMIZE_INSTALL_SCRIPT) | bash -s -- $(subst v,,$(KUSTOMIZE_VERSION)) $(LOCALBIN); }

GOARCH ?= $(shell go env GOHOSTARCH)
PLATFORM ?= $(shell go env GOHOSTOS)/$(shell go env GOHOSTARCH)

##############################################################
##@ Development
##############################################################

.PHONY: fmt
fmt: ## Run go fmt against code.
	go fmt ./...

.PHONY: verify
verify: ## Verify all the autogenerated code
	./hack/verify-codegen.sh

##############################################################
##@ Build
##############################################################

.PHONY: build
build: fmt ## Build all the userspace example code.
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-tc-counter/go-tc-counter go-tc-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-tcx-counter/go-tcx-counter go-tcx-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-tracepoint-counter/go-tracepoint-counter go-tracepoint-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-xdp-counter/go-xdp-counter go-xdp-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-kprobe-counter/go-kprobe-counter go-kprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-uprobe-counter/go-uprobe-counter go-uprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-uretprobe-counter/go-uretprobe-counter go-uretprobe-counter/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-target/go-target go-target/main.go
	CGO_ENABLED=0 GOOS=linux GOARCH=$(GOARCH) go build -o go-app-counter/go-app-counter \
	go-app-counter/main.go go-app-counter/kprobe_main.go go-app-counter/tracepoint_main.go \
	go-app-counter/uprobe_main.go go-app-counter/tc_main.go go-app-counter/tcx_main.go go-app-counter/xdp_main.go

.PHONY: generate
generate: ## Run `go generate` to build the bytecode for each of the examples.
	go generate ./...

.PHONY: build-release-yamls
build-release-yamls: kustomize ## Generate yamls examples for a specific release version.
	VERSION=$(VERSION) ./build-release-yamls.sh


.PHONY: build-bc-images
build-bc-images: generate ## Build all example bytecode images
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_TC_BC} -b ./go-tc-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_TCX_BC} -b ./go-tcx-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_TP_BC} -b ./go-tracepoint-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_XDP_BC} -b ./go-xdp-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_KP_BC} -b ./go-kprobe-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_UP_BC} -b ./go-uprobe-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_URP_BC} -b ./go-uretprobe-counter/bpf_x86_bpfel.o
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_APP_BC} -b ./go-app-counter/bpf_x86_bpfel.o

.PHONY: push-bc-images
push-bc-images: ## Push all example userspace images
	docker push ${IMAGE_TC_BC}
	docker push ${IMAGE_TCX_BC}
	docker push ${IMAGE_TP_BC}
	docker push ${IMAGE_XDP_BC}
	docker push ${IMAGE_KP_BC}
	docker push ${IMAGE_UP_BC}
	docker push ${IMAGE_URP_BC}
	docker push ${IMAGE_APP_BC}

.PHONY: build-bc-tc
build-bc-tc: generate ## Build TC example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_TC_BC} -b ./go-tc-counter/bpf_x86_bpfel.o

.PHONY: build-bc-tp
build-bc-tp: generate ## Build Tracepoint example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_TP_BC} -b ./go-tracepoint-counter/bpf_x86_bpfel.o

.PHONY: build-bc-xdp
build-bc-xdp: generate ## Build XDP example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_XDP_BC} -b ./go-xdp-counter/bpf_x86_bpfel.o

.PHONY: build-bc-kprobe
build-bc-kprobe: generate ## Build kprobe example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_KP_BC} -b ./go-kprobe-counter/bpf_x86_bpfel.o

.PHONY: build-bc-uprobe
build-bc-uprobe: generate ## Build uprobe example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_UP_BC} -b ./go-uprobe-counter/bpf_x86_bpfel.o

.PHONY: build-bc-uretprobe
build-bc-uretprobe: generate ## Build uretprobe example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_URP_BC} -b ./go-uretprobe-counter/bpf_x86_bpfel.o

.PHONY: build-bc-app
build-bc-app: generate ## Build application example bytecode image
	bpfman image build -f ../Containerfile.bytecode -t ${IMAGE_APP_BC} -b ./go-app-counter/bpf_x86_bpfel.o


.PHONY: build-us-images
build-us-images: build ## Build all example userspace images
	docker buildx build -t ${IMAGE_TC_US}  --platform ${PLATFORM} --load -f ./go-tc-counter/container-deployment/Containerfile.go-tc-counter ../
	docker buildx build -t ${IMAGE_TCX_US} --platform ${PLATFORM} --load -f ./go-tcx-counter/container-deployment/Containerfile.go-tcx-counter ../
	docker buildx build -t ${IMAGE_TP_US}  --platform ${PLATFORM} --load -f ./go-tracepoint-counter/container-deployment/Containerfile.go-tracepoint-counter ../
	docker buildx build -t ${IMAGE_XDP_US} --platform ${PLATFORM} --load -f ./go-xdp-counter/container-deployment/Containerfile.go-xdp-counter ../
	docker buildx build -t ${IMAGE_KP_US}  --platform ${PLATFORM} --load -f ./go-kprobe-counter/container-deployment/Containerfile.go-kprobe-counter ../
	docker buildx build -t ${IMAGE_UP_US}  --platform ${PLATFORM} --load -f ./go-uprobe-counter/container-deployment/Containerfile.go-uprobe-counter ../
	docker buildx build -t ${IMAGE_URP_US} --platform ${PLATFORM} --load -f ./go-uretprobe-counter/container-deployment/Containerfile.go-uretprobe-counter ../
	docker buildx build -t ${IMAGE_GT_US}  --platform ${PLATFORM} --load -f ./go-target/container-deployment/Containerfile.go-target ../
	docker buildx build -t ${IMAGE_APP_US} --platform ${PLATFORM} --load -f ./go-app-counter/container-deployment/Containerfile.go-app-counter ../

.PHONY: build-us-tc
build-us-tc: build ## Build TC example userspace image
	docker buildx build -t ${IMAGE_TC_US} --platform ${PLATFORM} --load -f ./go-tc-counter/container-deployment/Containerfile.go-tc-counter ../

.PHONY: build-us-tp
build-us-tp: build ## Build Tracepoint example userspace image
	docker buildx build -t ${IMAGE_TP_US} --platform ${PLATFORM} --load -f ./go-tracepoint-counter/container-deployment/Containerfile.go-tracepoint-counter ../

.PHONY: build-us-xdp
build-us-xdp: build ## Build XDP example userspace image
	docker buildx build -t ${IMAGE_XDP_US} --platform ${PLATFORM} --load -f ./go-xdp-counter/container-deployment/Containerfile.go-xdp-counter ../

.PHONY: build-us-kprobe
build-us-kprobe: build ## Build kprobe example userspace image
	docker buildx build -t ${IMAGE_KP_US} --platform ${PLATFORM} --load -f ./go-kprobe-counter/container-deployment/Containerfile.go-kprobe-counter ../

.PHONY: build-us-uprobe
build-us-uprobe: build ## Build uprobe example userspace image
	docker buildx build -t ${IMAGE_UP_US} --platform ${PLATFORM} --load -f ./go-uprobe-counter/container-deployment/Containerfile.go-uprobe-counter ../

.PHONY: build-us-uretprobe
build-us-uretprobe: build ## Build uretprobe example userspace image
	docker buildx build -t ${IMAGE_URP_US} --platform ${PLATFORM} --load -f ./go-uretprobe-counter/container-deployment/Containerfile.go-uretprobe-counter ../

.PHONY: build-us-target
build-us-target: build ## Build target example userspace image
	docker buildx build -t ${IMAGE_GT_US} --platform ${PLATFORM} --load -f ./go-target/container-deployment/Containerfile.go-target ../

.PHONY: build-us-app
build-us-app: build ## Build application example userspace image
	docker buildx build -t ${IMAGE_APP_US} --platform ${PLATFORM} --load  -f ./go-app-counter/container-deployment/Containerfile.go-app-counter ../


.PHONY: push-us-images
push-us-images: ## Push all example userspace images
	docker push ${IMAGE_TC_US}
	docker push ${IMAGE_TCX_US}
	docker push ${IMAGE_TP_US}
	docker push ${IMAGE_XDP_US}
	docker push ${IMAGE_KP_US}
	docker push ${IMAGE_UP_US}
	docker push ${IMAGE_URP_US}
	docker push ${IMAGE_APP_US}
	docker push ${IMAGE_GT_US}

.PHONY: load-us-images-kind
load-us-images-kind: build-us-images ## Build and load all example userspace images into kind
	kind load docker-image ${IMAGE_TC_US} ${IMAGE_TCX_US} ${IMAGE_TP_US} ${IMAGE_XDP_US} ${IMAGE_KP_US} ${IMAGE_UP_US} ${IMAGE_GT_US} ${IMAGE_APP_US} --name ${KIND_CLUSTER_NAME}

##############################################################
##@ Build and Deployment Variables (not commands)
##############################################################

TAG: ## ONLY deploy commands. Used to set all images to a fixed tag. TAG takes precedence over TAG_BC or TAG_US. Example: make deploy TAG=v0.2.0
TAG_BC: ## Used to set all bytecode images to a given tag. Example: make deploy TAG_BC=test-bc
TAG_US: ## Used to set all userspace images to a given tag. Example: make build-us-images TAG_US=test; make deploy TAG_US=test-us
USER_BC: ## Used to set all bytecode images to a given respository account. Example: make deploy USER_BC=$QUAY_USER
USER_US: ## Used to set all userspace images to a given respository account. Example: make build-us-images USER_US=$QUAY_USER; make deploy USER_US=$QUAY_USER
IMAGE_TC_BC: ## TC Bytecode image. Example: make deploy-tc IMAGE_TC_BC=quay.io/user1/go-tc-counter-bytecode:test
IMAGE_TC_US: ## TC Userspace image. Example: make deploy-tc IMAGE_TC_US=quay.io/user1/go-tc-counter-userspace:test
IMAGE_TCX_BC: ## TCX Bytecode image. Example: make deploy-tcx IMAGE_TCX_BC=quay.io/user1/go-tcx-counter-bytecode:test
IMAGE_TCX_US: ## TCX Userspace image. Example: make deploy-tcx IMAGE_TCX_US=quay.io/user1/go-tcx-counter-userspace:test
IMAGE_TP_BC: ## Tracepoint Bytecode image. Example: make deploy-tracepoint IMAGE_TP_BC=quay.io/user1/go-tracepoint-counter-bytecode:test
IMAGE_TP_US: ## Tracepoint Userspace image. Example: make deploy-tracepoint IMAGE_TP_US=quay.io/user1/go-tracepoint-counter-userspace:test
IMAGE_XDP_BC: ## XDP Bytecode image. Example: make deploy-xdp IMAGE_XDP_BC=quay.io/user1/go-xdp-counter-bytecode:test
IMAGE_XDP_US: ## XDP Userspace image. Example: make deploy-xdp IMAGE_XDP_US=quay.io/user1/go-xdp-counter-userspace:test
IMAGE_KP_BC: ## Kprobe Bytecode image. Example: make deploy-kprobe IMAGE_KP_BC=quay.io/user1/go-kprobe-counter-bytecode:test
IMAGE_KP_US: ## Kprobe Userspace image. Example: make deploy-kprobe IMAGE_KP_US=quay.io/user1/go-kprobe-counter-userspace:test
IMAGE_UP_BC: ## Uprobe Bytecode image. Example: make deploy-uprobe IMAGE_UP_BC=quay.io/user1/go-uprobe-counter-bytecode:test
IMAGE_UP_US: ## Uprobe Userspace image. Example: make deploy-uprobe IMAGE_UP_US=quay.io/user1/go-uprobe-counter-userspace:test
IMAGE_URP_BC: ## URetprobe Userspace image. Example: make deploy-uretprobe IMAGE_URP_BC=quay.io/user1/go-uretprobe-counter-bytecode:test
IMAGE_URP_US: ## URetprobe Userspace image. Example: make deploy-uretprobe IMAGE_URP_US=quay.io/user1/go-uretprobe-counter-userspace:test
IMAGE_APP_BC: ## Application Userspace image. Example: make deploy-app IMAGE_URP_BC=quay.io/user1/go-app-counter-bytecode:test
IMAGE_APP_US: ## Application Userspace image. Example: make deploy-app IMAGE_URP_US=quay.io/user1/go-app-counter-userspace:test
IMAGE_GT_US: ## Uprobe Userspace target. Example: make deploy-target IMAGE_GT_US=quay.io/user1/go-target-userspace:test
KIND_CLUSTER_NAME: ## Name of the deployed cluster to load example images to, defaults to `bpfman-deployment`
ignore-not-found: ## For any undeploy command, set to true to ignore resource not found errors during deletion. Example: make undeploy ignore-not-found=true

TAG_BC ?= latest
TAG_US ?= latest
USER_BC ?= bpfman-bytecode
USER_US ?= bpfman-userspace
IMAGE_TC_BC ?= quay.io/$(USER_BC)/go-tc-counter:$(TAG_BC)
IMAGE_TC_US ?= quay.io/$(USER_US)/go-tc-counter:$(TAG_US)
IMAGE_TCX_BC ?= quay.io/$(USER_BC)/go-tcx-counter:$(TAG_BC)
IMAGE_TCX_US ?= quay.io/$(USER_US)/go-tcx-counter:$(TAG_US)
IMAGE_TP_BC ?= quay.io/$(USER_BC)/go-tracepoint-counter:$(TAG_BC)
IMAGE_TP_US ?= quay.io/$(USER_US)/go-tracepoint-counter:$(TAG_US)
IMAGE_XDP_BC ?= quay.io/$(USER_BC)/go-xdp-counter:$(TAG_BC)
IMAGE_XDP_US ?= quay.io/$(USER_US)/go-xdp-counter:$(TAG_US)
IMAGE_KP_BC ?= quay.io/$(USER_BC)/go-kprobe-counter:$(TAG_BC)
IMAGE_KP_US ?= quay.io/$(USER_US)/go-kprobe-counter:$(TAG_US)
IMAGE_UP_BC ?= quay.io/$(USER_BC)/go-uprobe-counter:$(TAG_BC)
IMAGE_UP_US ?= quay.io/$(USER_US)/go-uprobe-counter:$(TAG_US)
IMAGE_URP_BC ?= quay.io/$(USER_BC)/go-uretprobe-counter:$(TAG_BC)
IMAGE_URP_US ?= quay.io/$(USER_US)/go-uretprobe-counter:$(TAG_US)
IMAGE_APP_BC ?= quay.io/$(USER_BC)/go-app-counter:$(TAG_BC)
IMAGE_APP_US ?= quay.io/$(USER_US)/go-app-counter:$(TAG_US)
IMAGE_GT_US ?= quay.io/$(USER_US)/go-target:$(TAG_US)
KIND_CLUSTER_NAME ?= bpfman-deployment


##############################################################
##@ Deployment
##############################################################

# Collect all targets for deploy, deploy-selinux, undeploy and undeploy-selinux.
DEPLOY_TARGETS = deploy-tc deploy-tcx deploy-tracepoint deploy-xdp deploy-kprobe deploy-uprobe deploy-uretprobe deploy-app deploy-target
DEPLOY_SELINUX_TARGETS := $(addsuffix -selinux,$(filter-out deploy-target,$(DEPLOY_TARGETS)))
UNDEPLOY_TARGETS := $(addprefix un,$(DEPLOY_TARGETS))
UNDEPLOY_SELINUX_TARGETS := $(addsuffix -selinux,$(filter-out undeploy-target,$(UNDEPLOY_TARGETS)))

# Generate deploy wrapper targets
$(foreach target,$(DEPLOY_TARGETS),$(eval .$(target): ; @echo -e "\n$$(MAKE) $(target)"; $$(MAKE) $(target);))
.PHONY: deploy
deploy: $(foreach target,$(DEPLOY_TARGETS),.$(target)) ## Deploy all examples to the cluster specified in ~/.kube/config.

# Generate selinux deploy targets dynamically
$(foreach target,$(DEPLOY_SELINUX_TARGETS),$(eval .$(target): ; @echo -e "\n$$(MAKE) $(target)"; $$(MAKE) $(target)))
.PHONY: deploy-selinux
deploy-selinux: $(foreach target,$(DEPLOY_SELINUX_TARGETS),.$(target)) .deploy-target ## Deploy all examples to the cluster specified in ~/.kube/config.

# Generate undeploy wrapper targets
$(foreach target,$(UNDEPLOY_TARGETS),$(eval .$(target): ; @echo -e "\n$$(MAKE) $(target)"; $$(MAKE) $(target)))
.PHONY: undeploy
undeploy: $(foreach target,$(UNDEPLOY_TARGETS),.$(target)) ## Undeploy all examples from the cluster specified in ~/.kube/config.

# Generate selinux undeploy targets dynamically
$(foreach target,$(UNDEPLOY_SELINUX_TARGETS),$(eval .$(target): ; @echo -e "\n$$(MAKE) $(target)"; $$(MAKE) $(target)))
.PHONY: undeploy-selinux
undeploy-selinux: $(foreach target,$(UNDEPLOY_SELINUX_TARGETS),.$(target)) .undeploy-target ## Undeploy all examples from the cluster specified in ~/.kube/config.

##############################################################
##@ Deployment sub targets
##############################################################

.PHONY: deploy-target
deploy-target: ## Deploy go-target to the cluster specified in ~/.kube/config.
	kubectl apply -f config/base/go-target/deployment.yaml

.PHONY: undeploy-target
undeploy-target: ## Undeploy go-target from the cluster specified in ~/.kube/config.
	kubectl delete -f config/base/go-target/deployment.yaml

# Program configuration data: target:prog-name:image-bc-var:image-us-var
PROGRAM_CONFIGS := \
	tc:go-tc-counter:IMAGE_TC_BC:IMAGE_TC_US \
	tcx:go-tcx-counter:IMAGE_TCX_BC:IMAGE_TCX_US \
	tracepoint:go-tracepoint-counter:IMAGE_TP_BC:IMAGE_TP_US \
	xdp:go-xdp-counter:IMAGE_XDP_BC:IMAGE_XDP_US \
	kprobe:go-kprobe-counter:IMAGE_KP_BC:IMAGE_KP_US \
	uprobe:go-uprobe-counter:IMAGE_UP_BC:IMAGE_UP_US \
	uretprobe:go-uretprobe-counter:IMAGE_URP_BC:IMAGE_URP_US \
	app:go-app-counter:IMAGE_APP_BC:IMAGE_APP_US

# Extract target names for help display
PROGRAM_TARGETS := $(foreach config,$(PROGRAM_CONFIGS),$(word 1,$(subst :, ,$(config))))

# prog-common is the base for deploy-prog and undeploy-prog and either runs kubectl apply of kubectl delete for the program
.PHONY: prog-common
prog-common: 
ifndef TAG
	$(eval DIRECTORY=$(if $(findstring selinux,$(MAKECMDGOALS)),selinux,default))
	sed 's@URL_BC@$(IMAGE_BC)@' config/$(DIRECTORY)/$(PROG_NAME)/patch.yaml.env > config/$(DIRECTORY)/$(PROG_NAME)/patch.yaml
	cd config/$(DIRECTORY)/$(PROG_NAME) && $(KUSTOMIZE) edit set image quay.io/bpfman-userspace/$(PROG_NAME)=${IMAGE_US}
else
	$(eval DIRECTORY=$(if $(findstring selinux,$(MAKECMDGOALS)),$(TAG)-selinux,$(TAG)))
endif
	$(eval KUST_DIR=$(DIRECTORY)/$(PROG_NAME))
	$(eval KUBECTL_CMD=$(if $(findstring undeploy,$(MAKECMDGOALS)),kubectl delete --timeout=120s --ignore-not-found=$(ignore-not-found),kubectl apply))
	@if [ -f config/$(KUST_DIR)/kustomization.yaml ]; then \
		echo "Using KUST_DIR=$(KUST_DIR)" ; \
		$(KUSTOMIZE) build config/$(KUST_DIR) | $(KUBECTL_CMD) -f - ; \
	else \
		echo "Manifests $(KUST_DIR) do not exist for program $(PROG_NAME)" ; \
		exit 1 ; \
	fi

# Logic for deploy-prog is implemented in prog-common
.PHONY: deploy-prog
deploy-prog: kustomize prog-common

# Logic for undeploy-prog is implemented in prog-common
.PHONY: undeploy-prog
undeploy-prog: prog-common

# Function to generate individual deploy/undeploy targets for each program
define generate_program_targets
$(eval TARGET := $(word 1,$(subst :, ,$1)))
$(eval PROG_NAME := $(word 2,$(subst :, ,$1)))
$(eval IMAGE_BC_VAR := $(word 3,$(subst :, ,$1)))
$(eval IMAGE_US_VAR := $(word 4,$(subst :, ,$1)))

.PHONY: deploy-$(TARGET) deploy-$(TARGET)-selinux
deploy-$(TARGET) deploy-$(TARGET)-selinux: PROG_NAME=$(PROG_NAME)
deploy-$(TARGET) deploy-$(TARGET)-selinux: IMAGE_BC=$$($(IMAGE_BC_VAR))
deploy-$(TARGET) deploy-$(TARGET)-selinux: IMAGE_US=$$($(IMAGE_US_VAR))
deploy-$(TARGET) deploy-$(TARGET)-selinux: deploy-prog

.PHONY: undeploy-$(TARGET) undeploy-$(TARGET)-selinux
undeploy-$(TARGET) undeploy-$(TARGET)-selinux: PROG_NAME=$(PROG_NAME)
undeploy-$(TARGET) undeploy-$(TARGET)-selinux: IMAGE_BC=$$($(IMAGE_BC_VAR))
undeploy-$(TARGET) undeploy-$(TARGET)-selinux: IMAGE_US=$$($(IMAGE_US_VAR))
undeploy-$(TARGET) undeploy-$(TARGET)-selinux: undeploy-prog

endef

# Generate actual targets for all programs
$(foreach config,$(PROGRAM_CONFIGS),$(eval $(call generate_program_targets,$(config))))
