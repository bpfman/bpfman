// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: bpfman.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BytecodeImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ImagePullPolicy int32   `protobuf:"varint,2,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,omitempty"`
	Username        *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password        *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *BytecodeImage) Reset() {
	*x = BytecodeImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytecodeImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytecodeImage) ProtoMessage() {}

func (x *BytecodeImage) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytecodeImage.ProtoReflect.Descriptor instead.
func (*BytecodeImage) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{0}
}

func (x *BytecodeImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BytecodeImage) GetImagePullPolicy() int32 {
	if x != nil {
		return x.ImagePullPolicy
	}
	return 0
}

func (x *BytecodeImage) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *BytecodeImage) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// BytecodeLocation is either:
// - Parameters to pull an eBPF program stored in an OCI container image.
// - Local file path for an image.
type BytecodeLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//
	//	*BytecodeLocation_Image
	//	*BytecodeLocation_File
	Location isBytecodeLocation_Location `protobuf_oneof:"location"`
}

func (x *BytecodeLocation) Reset() {
	*x = BytecodeLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytecodeLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytecodeLocation) ProtoMessage() {}

func (x *BytecodeLocation) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytecodeLocation.ProtoReflect.Descriptor instead.
func (*BytecodeLocation) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{1}
}

func (m *BytecodeLocation) GetLocation() isBytecodeLocation_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *BytecodeLocation) GetImage() *BytecodeImage {
	if x, ok := x.GetLocation().(*BytecodeLocation_Image); ok {
		return x.Image
	}
	return nil
}

func (x *BytecodeLocation) GetFile() string {
	if x, ok := x.GetLocation().(*BytecodeLocation_File); ok {
		return x.File
	}
	return ""
}

type isBytecodeLocation_Location interface {
	isBytecodeLocation_Location()
}

type BytecodeLocation_Image struct {
	Image *BytecodeImage `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type BytecodeLocation_File struct {
	File string `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*BytecodeLocation_Image) isBytecodeLocation_Location() {}

func (*BytecodeLocation_File) isBytecodeLocation_Location() {}

type KernelProgramInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Name as seen by the kernel. May be truncated version of user enter
	// name since limited to 16 byte by kernel
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProgramType   uint32   `protobuf:"varint,3,opt,name=program_type,json=programType,proto3" json:"program_type,omitempty"`
	LoadedAt      string   `protobuf:"bytes,4,opt,name=loaded_at,json=loadedAt,proto3" json:"loaded_at,omitempty"`
	Tag           string   `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	GplCompatible bool     `protobuf:"varint,6,opt,name=gpl_compatible,json=gplCompatible,proto3" json:"gpl_compatible,omitempty"`
	MapIds        []uint32 `protobuf:"varint,7,rep,packed,name=map_ids,json=mapIds,proto3" json:"map_ids,omitempty"`
	BtfId         uint32   `protobuf:"varint,8,opt,name=btf_id,json=btfId,proto3" json:"btf_id,omitempty"`
	BytesXlated   uint32   `protobuf:"varint,9,opt,name=bytes_xlated,json=bytesXlated,proto3" json:"bytes_xlated,omitempty"`
	Jited         bool     `protobuf:"varint,10,opt,name=jited,proto3" json:"jited,omitempty"`
	BytesJited    uint32   `protobuf:"varint,11,opt,name=bytes_jited,json=bytesJited,proto3" json:"bytes_jited,omitempty"`
	BytesMemlock  uint32   `protobuf:"varint,12,opt,name=bytes_memlock,json=bytesMemlock,proto3" json:"bytes_memlock,omitempty"`
	VerifiedInsns uint32   `protobuf:"varint,13,opt,name=verified_insns,json=verifiedInsns,proto3" json:"verified_insns,omitempty"`
}

func (x *KernelProgramInfo) Reset() {
	*x = KernelProgramInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelProgramInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelProgramInfo) ProtoMessage() {}

func (x *KernelProgramInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelProgramInfo.ProtoReflect.Descriptor instead.
func (*KernelProgramInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{2}
}

func (x *KernelProgramInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KernelProgramInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KernelProgramInfo) GetProgramType() uint32 {
	if x != nil {
		return x.ProgramType
	}
	return 0
}

func (x *KernelProgramInfo) GetLoadedAt() string {
	if x != nil {
		return x.LoadedAt
	}
	return ""
}

func (x *KernelProgramInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *KernelProgramInfo) GetGplCompatible() bool {
	if x != nil {
		return x.GplCompatible
	}
	return false
}

func (x *KernelProgramInfo) GetMapIds() []uint32 {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (x *KernelProgramInfo) GetBtfId() uint32 {
	if x != nil {
		return x.BtfId
	}
	return 0
}

func (x *KernelProgramInfo) GetBytesXlated() uint32 {
	if x != nil {
		return x.BytesXlated
	}
	return 0
}

func (x *KernelProgramInfo) GetJited() bool {
	if x != nil {
		return x.Jited
	}
	return false
}

func (x *KernelProgramInfo) GetBytesJited() uint32 {
	if x != nil {
		return x.BytesJited
	}
	return 0
}

func (x *KernelProgramInfo) GetBytesMemlock() uint32 {
	if x != nil {
		return x.BytesMemlock
	}
	return 0
}

func (x *KernelProgramInfo) GetVerifiedInsns() uint32 {
	if x != nil {
		return x.VerifiedInsns
	}
	return 0
}

type ProgramInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name entered by user
	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bytecode   *BytecodeLocation `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Attach     *AttachInfo       `protobuf:"bytes,3,opt,name=attach,proto3" json:"attach,omitempty"`
	GlobalData map[string][]byte `protobuf:"bytes,4,rep,name=global_data,json=globalData,proto3" json:"global_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapOwnerId *uint32           `protobuf:"varint,5,opt,name=map_owner_id,json=mapOwnerId,proto3,oneof" json:"map_owner_id,omitempty"`
	MapPinPath string            `protobuf:"bytes,6,opt,name=map_pin_path,json=mapPinPath,proto3" json:"map_pin_path,omitempty"`
	MapUsedBy  []string          `protobuf:"bytes,7,rep,name=map_used_by,json=mapUsedBy,proto3" json:"map_used_by,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProgramInfo) Reset() {
	*x = ProgramInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramInfo) ProtoMessage() {}

func (x *ProgramInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramInfo.ProtoReflect.Descriptor instead.
func (*ProgramInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{3}
}

func (x *ProgramInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProgramInfo) GetBytecode() *BytecodeLocation {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

func (x *ProgramInfo) GetAttach() *AttachInfo {
	if x != nil {
		return x.Attach
	}
	return nil
}

func (x *ProgramInfo) GetGlobalData() map[string][]byte {
	if x != nil {
		return x.GlobalData
	}
	return nil
}

func (x *ProgramInfo) GetMapOwnerId() uint32 {
	if x != nil && x.MapOwnerId != nil {
		return *x.MapOwnerId
	}
	return 0
}

func (x *ProgramInfo) GetMapPinPath() string {
	if x != nil {
		return x.MapPinPath
	}
	return ""
}

func (x *ProgramInfo) GetMapUsedBy() []string {
	if x != nil {
		return x.MapUsedBy
	}
	return nil
}

func (x *ProgramInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type XDPAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority  int32   `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Iface     string  `protobuf:"bytes,2,opt,name=iface,proto3" json:"iface,omitempty"`
	Position  int32   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	ProceedOn []int32 `protobuf:"varint,4,rep,packed,name=proceed_on,json=proceedOn,proto3" json:"proceed_on,omitempty"`
}

func (x *XDPAttachInfo) Reset() {
	*x = XDPAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XDPAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XDPAttachInfo) ProtoMessage() {}

func (x *XDPAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XDPAttachInfo.ProtoReflect.Descriptor instead.
func (*XDPAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{4}
}

func (x *XDPAttachInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *XDPAttachInfo) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *XDPAttachInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *XDPAttachInfo) GetProceedOn() []int32 {
	if x != nil {
		return x.ProceedOn
	}
	return nil
}

type TCAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority  int32   `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Iface     string  `protobuf:"bytes,2,opt,name=iface,proto3" json:"iface,omitempty"`
	Position  int32   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Direction string  `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	ProceedOn []int32 `protobuf:"varint,5,rep,packed,name=proceed_on,json=proceedOn,proto3" json:"proceed_on,omitempty"`
}

func (x *TCAttachInfo) Reset() {
	*x = TCAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCAttachInfo) ProtoMessage() {}

func (x *TCAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCAttachInfo.ProtoReflect.Descriptor instead.
func (*TCAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{5}
}

func (x *TCAttachInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TCAttachInfo) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *TCAttachInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TCAttachInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TCAttachInfo) GetProceedOn() []int32 {
	if x != nil {
		return x.ProceedOn
	}
	return nil
}

type TCXAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority  int32  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Iface     string `protobuf:"bytes,2,opt,name=iface,proto3" json:"iface,omitempty"`
	Position  int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Direction string `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *TCXAttachInfo) Reset() {
	*x = TCXAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCXAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCXAttachInfo) ProtoMessage() {}

func (x *TCXAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCXAttachInfo.ProtoReflect.Descriptor instead.
func (*TCXAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{6}
}

func (x *TCXAttachInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TCXAttachInfo) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *TCXAttachInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TCXAttachInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type TracepointAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracepoint string `protobuf:"bytes,1,opt,name=tracepoint,proto3" json:"tracepoint,omitempty"`
}

func (x *TracepointAttachInfo) Reset() {
	*x = TracepointAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracepointAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracepointAttachInfo) ProtoMessage() {}

func (x *TracepointAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracepointAttachInfo.ProtoReflect.Descriptor instead.
func (*TracepointAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{7}
}

func (x *TracepointAttachInfo) GetTracepoint() string {
	if x != nil {
		return x.Tracepoint
	}
	return ""
}

type KprobeAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FnName       string `protobuf:"bytes,1,opt,name=fn_name,json=fnName,proto3" json:"fn_name,omitempty"`
	Offset       uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Retprobe     bool   `protobuf:"varint,3,opt,name=retprobe,proto3" json:"retprobe,omitempty"`
	ContainerPid *int32 `protobuf:"varint,4,opt,name=container_pid,json=containerPid,proto3,oneof" json:"container_pid,omitempty"`
}

func (x *KprobeAttachInfo) Reset() {
	*x = KprobeAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeAttachInfo) ProtoMessage() {}

func (x *KprobeAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeAttachInfo.ProtoReflect.Descriptor instead.
func (*KprobeAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{8}
}

func (x *KprobeAttachInfo) GetFnName() string {
	if x != nil {
		return x.FnName
	}
	return ""
}

func (x *KprobeAttachInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *KprobeAttachInfo) GetRetprobe() bool {
	if x != nil {
		return x.Retprobe
	}
	return false
}

func (x *KprobeAttachInfo) GetContainerPid() int32 {
	if x != nil && x.ContainerPid != nil {
		return *x.ContainerPid
	}
	return 0
}

type UprobeAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FnName       *string `protobuf:"bytes,1,opt,name=fn_name,json=fnName,proto3,oneof" json:"fn_name,omitempty"`
	Offset       uint64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Target       string  `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Retprobe     bool    `protobuf:"varint,4,opt,name=retprobe,proto3" json:"retprobe,omitempty"`
	Pid          *int32  `protobuf:"varint,5,opt,name=pid,proto3,oneof" json:"pid,omitempty"`
	ContainerPid *int32  `protobuf:"varint,6,opt,name=container_pid,json=containerPid,proto3,oneof" json:"container_pid,omitempty"`
}

func (x *UprobeAttachInfo) Reset() {
	*x = UprobeAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UprobeAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UprobeAttachInfo) ProtoMessage() {}

func (x *UprobeAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UprobeAttachInfo.ProtoReflect.Descriptor instead.
func (*UprobeAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{9}
}

func (x *UprobeAttachInfo) GetFnName() string {
	if x != nil && x.FnName != nil {
		return *x.FnName
	}
	return ""
}

func (x *UprobeAttachInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UprobeAttachInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UprobeAttachInfo) GetRetprobe() bool {
	if x != nil {
		return x.Retprobe
	}
	return false
}

func (x *UprobeAttachInfo) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *UprobeAttachInfo) GetContainerPid() int32 {
	if x != nil && x.ContainerPid != nil {
		return *x.ContainerPid
	}
	return 0
}

type FentryAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FnName string `protobuf:"bytes,1,opt,name=fn_name,json=fnName,proto3" json:"fn_name,omitempty"`
}

func (x *FentryAttachInfo) Reset() {
	*x = FentryAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FentryAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FentryAttachInfo) ProtoMessage() {}

func (x *FentryAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FentryAttachInfo.ProtoReflect.Descriptor instead.
func (*FentryAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{10}
}

func (x *FentryAttachInfo) GetFnName() string {
	if x != nil {
		return x.FnName
	}
	return ""
}

type FexitAttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FnName string `protobuf:"bytes,1,opt,name=fn_name,json=fnName,proto3" json:"fn_name,omitempty"`
}

func (x *FexitAttachInfo) Reset() {
	*x = FexitAttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FexitAttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FexitAttachInfo) ProtoMessage() {}

func (x *FexitAttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FexitAttachInfo.ProtoReflect.Descriptor instead.
func (*FexitAttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{11}
}

func (x *FexitAttachInfo) GetFnName() string {
	if x != nil {
		return x.FnName
	}
	return ""
}

type AttachInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Info:
	//
	//	*AttachInfo_XdpAttachInfo
	//	*AttachInfo_TcAttachInfo
	//	*AttachInfo_TracepointAttachInfo
	//	*AttachInfo_KprobeAttachInfo
	//	*AttachInfo_UprobeAttachInfo
	//	*AttachInfo_FentryAttachInfo
	//	*AttachInfo_FexitAttachInfo
	//	*AttachInfo_TcxAttachInfo
	Info isAttachInfo_Info `protobuf_oneof:"info"`
}

func (x *AttachInfo) Reset() {
	*x = AttachInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachInfo) ProtoMessage() {}

func (x *AttachInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachInfo.ProtoReflect.Descriptor instead.
func (*AttachInfo) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{12}
}

func (m *AttachInfo) GetInfo() isAttachInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *AttachInfo) GetXdpAttachInfo() *XDPAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_XdpAttachInfo); ok {
		return x.XdpAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetTcAttachInfo() *TCAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_TcAttachInfo); ok {
		return x.TcAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetTracepointAttachInfo() *TracepointAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_TracepointAttachInfo); ok {
		return x.TracepointAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetKprobeAttachInfo() *KprobeAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_KprobeAttachInfo); ok {
		return x.KprobeAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetUprobeAttachInfo() *UprobeAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_UprobeAttachInfo); ok {
		return x.UprobeAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetFentryAttachInfo() *FentryAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_FentryAttachInfo); ok {
		return x.FentryAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetFexitAttachInfo() *FexitAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_FexitAttachInfo); ok {
		return x.FexitAttachInfo
	}
	return nil
}

func (x *AttachInfo) GetTcxAttachInfo() *TCXAttachInfo {
	if x, ok := x.GetInfo().(*AttachInfo_TcxAttachInfo); ok {
		return x.TcxAttachInfo
	}
	return nil
}

type isAttachInfo_Info interface {
	isAttachInfo_Info()
}

type AttachInfo_XdpAttachInfo struct {
	XdpAttachInfo *XDPAttachInfo `protobuf:"bytes,2,opt,name=xdp_attach_info,json=xdpAttachInfo,proto3,oneof"`
}

type AttachInfo_TcAttachInfo struct {
	TcAttachInfo *TCAttachInfo `protobuf:"bytes,3,opt,name=tc_attach_info,json=tcAttachInfo,proto3,oneof"`
}

type AttachInfo_TracepointAttachInfo struct {
	TracepointAttachInfo *TracepointAttachInfo `protobuf:"bytes,4,opt,name=tracepoint_attach_info,json=tracepointAttachInfo,proto3,oneof"`
}

type AttachInfo_KprobeAttachInfo struct {
	KprobeAttachInfo *KprobeAttachInfo `protobuf:"bytes,5,opt,name=kprobe_attach_info,json=kprobeAttachInfo,proto3,oneof"`
}

type AttachInfo_UprobeAttachInfo struct {
	UprobeAttachInfo *UprobeAttachInfo `protobuf:"bytes,6,opt,name=uprobe_attach_info,json=uprobeAttachInfo,proto3,oneof"`
}

type AttachInfo_FentryAttachInfo struct {
	FentryAttachInfo *FentryAttachInfo `protobuf:"bytes,7,opt,name=fentry_attach_info,json=fentryAttachInfo,proto3,oneof"`
}

type AttachInfo_FexitAttachInfo struct {
	FexitAttachInfo *FexitAttachInfo `protobuf:"bytes,8,opt,name=fexit_attach_info,json=fexitAttachInfo,proto3,oneof"`
}

type AttachInfo_TcxAttachInfo struct {
	TcxAttachInfo *TCXAttachInfo `protobuf:"bytes,9,opt,name=tcx_attach_info,json=tcxAttachInfo,proto3,oneof"`
}

func (*AttachInfo_XdpAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_TcAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_TracepointAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_KprobeAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_UprobeAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_FentryAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_FexitAttachInfo) isAttachInfo_Info() {}

func (*AttachInfo_TcxAttachInfo) isAttachInfo_Info() {}

type LoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytecode    *BytecodeLocation `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProgramType uint32            `protobuf:"varint,3,opt,name=program_type,json=programType,proto3" json:"program_type,omitempty"`
	Attach      *AttachInfo       `protobuf:"bytes,4,opt,name=attach,proto3" json:"attach,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GlobalData  map[string][]byte `protobuf:"bytes,6,rep,name=global_data,json=globalData,proto3" json:"global_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uuid        *string           `protobuf:"bytes,7,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	MapOwnerId  *uint32           `protobuf:"varint,8,opt,name=map_owner_id,json=mapOwnerId,proto3,oneof" json:"map_owner_id,omitempty"`
}

func (x *LoadRequest) Reset() {
	*x = LoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRequest) ProtoMessage() {}

func (x *LoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRequest.ProtoReflect.Descriptor instead.
func (*LoadRequest) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{13}
}

func (x *LoadRequest) GetBytecode() *BytecodeLocation {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

func (x *LoadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadRequest) GetProgramType() uint32 {
	if x != nil {
		return x.ProgramType
	}
	return 0
}

func (x *LoadRequest) GetAttach() *AttachInfo {
	if x != nil {
		return x.Attach
	}
	return nil
}

func (x *LoadRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoadRequest) GetGlobalData() map[string][]byte {
	if x != nil {
		return x.GlobalData
	}
	return nil
}

func (x *LoadRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *LoadRequest) GetMapOwnerId() uint32 {
	if x != nil && x.MapOwnerId != nil {
		return *x.MapOwnerId
	}
	return 0
}

type LoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *ProgramInfo       `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	KernelInfo *KernelProgramInfo `protobuf:"bytes,2,opt,name=kernel_info,json=kernelInfo,proto3" json:"kernel_info,omitempty"`
}

func (x *LoadResponse) Reset() {
	*x = LoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadResponse) ProtoMessage() {}

func (x *LoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadResponse.ProtoReflect.Descriptor instead.
func (*LoadResponse) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{14}
}

func (x *LoadResponse) GetInfo() *ProgramInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *LoadResponse) GetKernelInfo() *KernelProgramInfo {
	if x != nil {
		return x.KernelInfo
	}
	return nil
}

type UnloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnloadRequest) Reset() {
	*x = UnloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadRequest) ProtoMessage() {}

func (x *UnloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadRequest.ProtoReflect.Descriptor instead.
func (*UnloadRequest) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{15}
}

func (x *UnloadRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UnloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnloadResponse) Reset() {
	*x = UnloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnloadResponse) ProtoMessage() {}

func (x *UnloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnloadResponse.ProtoReflect.Descriptor instead.
func (*UnloadResponse) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{16}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramType        *uint32           `protobuf:"varint,1,opt,name=program_type,json=programType,proto3,oneof" json:"program_type,omitempty"`
	BpfmanProgramsOnly *bool             `protobuf:"varint,2,opt,name=bpfman_programs_only,json=bpfmanProgramsOnly,proto3,oneof" json:"bpfman_programs_only,omitempty"`
	MatchMetadata      map[string]string `protobuf:"bytes,3,rep,name=match_metadata,json=matchMetadata,proto3" json:"match_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{17}
}

func (x *ListRequest) GetProgramType() uint32 {
	if x != nil && x.ProgramType != nil {
		return *x.ProgramType
	}
	return 0
}

func (x *ListRequest) GetBpfmanProgramsOnly() bool {
	if x != nil && x.BpfmanProgramsOnly != nil {
		return *x.BpfmanProgramsOnly
	}
	return false
}

func (x *ListRequest) GetMatchMetadata() map[string]string {
	if x != nil {
		return x.MatchMetadata
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListResponse_ListResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{18}
}

func (x *ListResponse) GetResults() []*ListResponse_ListResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type PullBytecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *BytecodeImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PullBytecodeRequest) Reset() {
	*x = PullBytecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBytecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBytecodeRequest) ProtoMessage() {}

func (x *PullBytecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBytecodeRequest.ProtoReflect.Descriptor instead.
func (*PullBytecodeRequest) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{19}
}

func (x *PullBytecodeRequest) GetImage() *BytecodeImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type PullBytecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullBytecodeResponse) Reset() {
	*x = PullBytecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBytecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBytecodeResponse) ProtoMessage() {}

func (x *PullBytecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBytecodeResponse.ProtoReflect.Descriptor instead.
func (*PullBytecodeResponse) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{20}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{21}
}

func (x *GetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *ProgramInfo       `protobuf:"bytes,1,opt,name=info,proto3,oneof" json:"info,omitempty"`
	KernelInfo *KernelProgramInfo `protobuf:"bytes,2,opt,name=kernel_info,json=kernelInfo,proto3" json:"kernel_info,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{22}
}

func (x *GetResponse) GetInfo() *ProgramInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetResponse) GetKernelInfo() *KernelProgramInfo {
	if x != nil {
		return x.KernelInfo
	}
	return nil
}

type ListResponse_ListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *ProgramInfo       `protobuf:"bytes,1,opt,name=info,proto3,oneof" json:"info,omitempty"`
	KernelInfo *KernelProgramInfo `protobuf:"bytes,2,opt,name=kernel_info,json=kernelInfo,proto3" json:"kernel_info,omitempty"`
}

func (x *ListResponse_ListResult) Reset() {
	*x = ListResponse_ListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpfman_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse_ListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse_ListResult) ProtoMessage() {}

func (x *ListResponse_ListResult) ProtoReflect() protoreflect.Message {
	mi := &file_bpfman_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse_ListResult.ProtoReflect.Descriptor instead.
func (*ListResponse_ListResult) Descriptor() ([]byte, []int) {
	return file_bpfman_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListResponse_ListResult) GetInfo() *ProgramInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ListResponse_ListResult) GetKernelInfo() *KernelProgramInfo {
	if x != nil {
		return x.KernelInfo
	}
	return nil
}

var File_bpfman_proto protoreflect.FileDescriptor

var file_bpfman_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x42, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x66, 0x0a, 0x10, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x03,
	0x0a, 0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x70, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x67, 0x70, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x74, 0x66, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x78, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x58, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6a, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x4a, 0x69, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x6e, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x12, 0x47, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0c, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x55, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x0d, 0x58, 0x44, 0x50, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x4f,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x54, 0x43, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x7b, 0x0a,
	0x0d, 0x54, 0x43, 0x58, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64,
	0x22, 0xe3, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x15, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x46, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0f, 0x46, 0x65, 0x78, 0x69, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe7, 0x04, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42,
	0x0a, 0x0f, 0x78, 0x64, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x44, 0x50, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0d, 0x78, 0x64, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x70, 0x66,
	0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x43, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x63, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12,
	0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x75, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x78, 0x69, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x65,
	0x78, 0x69, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a,
	0x0f, 0x74, 0x63, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x43, 0x58, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x63, 0x78, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x04, 0x0a, 0x0b, 0x4c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x70,
	0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x70, 0x66, 0x6d,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x70, 0x66,
	0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0b, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x0c, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x70, 0x66,
	0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a, 0x0d, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x12, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x13, 0x50,
	0x75, 0x6c, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x32, 0xc0, 0x02, 0x0a, 0x06, 0x42, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62,
	0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x70, 0x66, 0x6d,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x62,
	0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e,
	0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62,
	0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x67, 0x6f, 0x62, 0x70, 0x66, 0x6d, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bpfman_proto_rawDescOnce sync.Once
	file_bpfman_proto_rawDescData = file_bpfman_proto_rawDesc
)

func file_bpfman_proto_rawDescGZIP() []byte {
	file_bpfman_proto_rawDescOnce.Do(func() {
		file_bpfman_proto_rawDescData = protoimpl.X.CompressGZIP(file_bpfman_proto_rawDescData)
	})
	return file_bpfman_proto_rawDescData
}

var file_bpfman_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_bpfman_proto_goTypes = []interface{}{
	(*BytecodeImage)(nil),           // 0: bpfman.v1.BytecodeImage
	(*BytecodeLocation)(nil),        // 1: bpfman.v1.BytecodeLocation
	(*KernelProgramInfo)(nil),       // 2: bpfman.v1.KernelProgramInfo
	(*ProgramInfo)(nil),             // 3: bpfman.v1.ProgramInfo
	(*XDPAttachInfo)(nil),           // 4: bpfman.v1.XDPAttachInfo
	(*TCAttachInfo)(nil),            // 5: bpfman.v1.TCAttachInfo
	(*TCXAttachInfo)(nil),           // 6: bpfman.v1.TCXAttachInfo
	(*TracepointAttachInfo)(nil),    // 7: bpfman.v1.TracepointAttachInfo
	(*KprobeAttachInfo)(nil),        // 8: bpfman.v1.KprobeAttachInfo
	(*UprobeAttachInfo)(nil),        // 9: bpfman.v1.UprobeAttachInfo
	(*FentryAttachInfo)(nil),        // 10: bpfman.v1.FentryAttachInfo
	(*FexitAttachInfo)(nil),         // 11: bpfman.v1.FexitAttachInfo
	(*AttachInfo)(nil),              // 12: bpfman.v1.AttachInfo
	(*LoadRequest)(nil),             // 13: bpfman.v1.LoadRequest
	(*LoadResponse)(nil),            // 14: bpfman.v1.LoadResponse
	(*UnloadRequest)(nil),           // 15: bpfman.v1.UnloadRequest
	(*UnloadResponse)(nil),          // 16: bpfman.v1.UnloadResponse
	(*ListRequest)(nil),             // 17: bpfman.v1.ListRequest
	(*ListResponse)(nil),            // 18: bpfman.v1.ListResponse
	(*PullBytecodeRequest)(nil),     // 19: bpfman.v1.PullBytecodeRequest
	(*PullBytecodeResponse)(nil),    // 20: bpfman.v1.PullBytecodeResponse
	(*GetRequest)(nil),              // 21: bpfman.v1.GetRequest
	(*GetResponse)(nil),             // 22: bpfman.v1.GetResponse
	nil,                             // 23: bpfman.v1.ProgramInfo.GlobalDataEntry
	nil,                             // 24: bpfman.v1.ProgramInfo.MetadataEntry
	nil,                             // 25: bpfman.v1.LoadRequest.MetadataEntry
	nil,                             // 26: bpfman.v1.LoadRequest.GlobalDataEntry
	nil,                             // 27: bpfman.v1.ListRequest.MatchMetadataEntry
	(*ListResponse_ListResult)(nil), // 28: bpfman.v1.ListResponse.ListResult
}
var file_bpfman_proto_depIdxs = []int32{
	0,  // 0: bpfman.v1.BytecodeLocation.image:type_name -> bpfman.v1.BytecodeImage
	1,  // 1: bpfman.v1.ProgramInfo.bytecode:type_name -> bpfman.v1.BytecodeLocation
	12, // 2: bpfman.v1.ProgramInfo.attach:type_name -> bpfman.v1.AttachInfo
	23, // 3: bpfman.v1.ProgramInfo.global_data:type_name -> bpfman.v1.ProgramInfo.GlobalDataEntry
	24, // 4: bpfman.v1.ProgramInfo.metadata:type_name -> bpfman.v1.ProgramInfo.MetadataEntry
	4,  // 5: bpfman.v1.AttachInfo.xdp_attach_info:type_name -> bpfman.v1.XDPAttachInfo
	5,  // 6: bpfman.v1.AttachInfo.tc_attach_info:type_name -> bpfman.v1.TCAttachInfo
	7,  // 7: bpfman.v1.AttachInfo.tracepoint_attach_info:type_name -> bpfman.v1.TracepointAttachInfo
	8,  // 8: bpfman.v1.AttachInfo.kprobe_attach_info:type_name -> bpfman.v1.KprobeAttachInfo
	9,  // 9: bpfman.v1.AttachInfo.uprobe_attach_info:type_name -> bpfman.v1.UprobeAttachInfo
	10, // 10: bpfman.v1.AttachInfo.fentry_attach_info:type_name -> bpfman.v1.FentryAttachInfo
	11, // 11: bpfman.v1.AttachInfo.fexit_attach_info:type_name -> bpfman.v1.FexitAttachInfo
	6,  // 12: bpfman.v1.AttachInfo.tcx_attach_info:type_name -> bpfman.v1.TCXAttachInfo
	1,  // 13: bpfman.v1.LoadRequest.bytecode:type_name -> bpfman.v1.BytecodeLocation
	12, // 14: bpfman.v1.LoadRequest.attach:type_name -> bpfman.v1.AttachInfo
	25, // 15: bpfman.v1.LoadRequest.metadata:type_name -> bpfman.v1.LoadRequest.MetadataEntry
	26, // 16: bpfman.v1.LoadRequest.global_data:type_name -> bpfman.v1.LoadRequest.GlobalDataEntry
	3,  // 17: bpfman.v1.LoadResponse.info:type_name -> bpfman.v1.ProgramInfo
	2,  // 18: bpfman.v1.LoadResponse.kernel_info:type_name -> bpfman.v1.KernelProgramInfo
	27, // 19: bpfman.v1.ListRequest.match_metadata:type_name -> bpfman.v1.ListRequest.MatchMetadataEntry
	28, // 20: bpfman.v1.ListResponse.results:type_name -> bpfman.v1.ListResponse.ListResult
	0,  // 21: bpfman.v1.PullBytecodeRequest.image:type_name -> bpfman.v1.BytecodeImage
	3,  // 22: bpfman.v1.GetResponse.info:type_name -> bpfman.v1.ProgramInfo
	2,  // 23: bpfman.v1.GetResponse.kernel_info:type_name -> bpfman.v1.KernelProgramInfo
	3,  // 24: bpfman.v1.ListResponse.ListResult.info:type_name -> bpfman.v1.ProgramInfo
	2,  // 25: bpfman.v1.ListResponse.ListResult.kernel_info:type_name -> bpfman.v1.KernelProgramInfo
	13, // 26: bpfman.v1.Bpfman.Load:input_type -> bpfman.v1.LoadRequest
	15, // 27: bpfman.v1.Bpfman.Unload:input_type -> bpfman.v1.UnloadRequest
	17, // 28: bpfman.v1.Bpfman.List:input_type -> bpfman.v1.ListRequest
	19, // 29: bpfman.v1.Bpfman.PullBytecode:input_type -> bpfman.v1.PullBytecodeRequest
	21, // 30: bpfman.v1.Bpfman.Get:input_type -> bpfman.v1.GetRequest
	14, // 31: bpfman.v1.Bpfman.Load:output_type -> bpfman.v1.LoadResponse
	16, // 32: bpfman.v1.Bpfman.Unload:output_type -> bpfman.v1.UnloadResponse
	18, // 33: bpfman.v1.Bpfman.List:output_type -> bpfman.v1.ListResponse
	20, // 34: bpfman.v1.Bpfman.PullBytecode:output_type -> bpfman.v1.PullBytecodeResponse
	22, // 35: bpfman.v1.Bpfman.Get:output_type -> bpfman.v1.GetResponse
	31, // [31:36] is the sub-list for method output_type
	26, // [26:31] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_bpfman_proto_init() }
func file_bpfman_proto_init() {
	if File_bpfman_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bpfman_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytecodeImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytecodeLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelProgramInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XDPAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCXAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracepointAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UprobeAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FentryAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FexitAttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBytecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBytecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpfman_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse_ListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bpfman_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BytecodeLocation_Image)(nil),
		(*BytecodeLocation_File)(nil),
	}
	file_bpfman_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AttachInfo_XdpAttachInfo)(nil),
		(*AttachInfo_TcAttachInfo)(nil),
		(*AttachInfo_TracepointAttachInfo)(nil),
		(*AttachInfo_KprobeAttachInfo)(nil),
		(*AttachInfo_UprobeAttachInfo)(nil),
		(*AttachInfo_FentryAttachInfo)(nil),
		(*AttachInfo_FexitAttachInfo)(nil),
		(*AttachInfo_TcxAttachInfo)(nil),
	}
	file_bpfman_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_bpfman_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bpfman_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bpfman_proto_goTypes,
		DependencyIndexes: file_bpfman_proto_depIdxs,
		MessageInfos:      file_bpfman_proto_msgTypes,
	}.Build()
	File_bpfman_proto = out.File
	file_bpfman_proto_rawDesc = nil
	file_bpfman_proto_goTypes = nil
	file_bpfman_proto_depIdxs = nil
}
