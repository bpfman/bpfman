syntax = "proto3";
package bpfman.v1;
option go_package = "github.com/bpfman/clients/gobpfman/v1;v1";

service Bpfman {
    rpc Load (LoadRequest) returns (LoadResponse);
    rpc Unload (UnloadRequest) returns (UnloadResponse);
    rpc List (ListRequest) returns (ListResponse);
    rpc PullBytecode (PullBytecodeRequest) returns (PullBytecodeResponse);
    rpc Get (GetRequest) returns ( GetResponse );
}

/* BytecodeImage represents an eBPF program that is packaged and contained within
 * an OCI container image.
 */

message BytecodeImage {
    string url = 1;
    int32 image_pull_policy = 2;
    optional string username = 3;
    optional string password = 4;
}

/* BytecodeLocation is either:
 * - Parameters to pull an eBPF program stored in an OCI container image.
 * - Local file path for an image.
 */
message BytecodeLocation { 
    oneof location {
        BytecodeImage image = 2;
        string file = 3;
    }
}

/* KernelProgramInfo represents the state for a single program that is
 * maintained internally by the Linux kernel within its bpf_prog_info
 * structure.
 */

message KernelProgramInfo { 
    uint32 id = 1;
    /* Name as seen by the kernel. May be truncated version of user enter */
    /* name since limited to 16 byte by kernel */
    string name = 2;
    uint32 program_type = 3;
    string loaded_at = 4;
    string tag = 5;
    bool gpl_compatible = 6;
    repeated uint32 map_ids = 7;
    uint32 btf_id = 8;
    uint32 bytes_xlated = 9;
    bool jited = 10;
    uint32 bytes_jited = 11;
    uint32 bytes_memlock = 12;
    uint32 verified_insns = 13;
}

/* ProgramInfo represents the state for a single eBPF program that is maintained
 * internally by bpfman. */

message ProgramInfo {
    /* Name entered by user */
    string name = 1;
    BytecodeLocation bytecode = 2;
    AttachInfo attach = 3;
    map<string, bytes> global_data = 4;
    optional uint32 map_owner_id = 5;
    string map_pin_path = 6;
    repeated string map_used_by = 7;
    map<string, string> metadata = 8;
}

/* XDPAttachInfo represents the program specific metadata which bpfman needs to 
 * attach and observe a XDP program on a given network interface.
 */

message XDPAttachInfo {
    int32 priority = 1;
    string iface = 2;
    int32 position = 3;
    repeated int32 proceed_on = 4;
}

/* TCAttachInfo represents the program specific metadata which bpfman needs to 
 * attach and observe a TC program on a given network interface.
 */

message TCAttachInfo {
    int32 priority = 1;
    string iface = 2;
    int32 position = 3;
    string direction = 4;
    repeated int32 proceed_on = 5;
}

/* TCXAttachInfo contains the information bpfman needs to attach a TCX program
 * on a given network interface.  Priority ranges from 1-1000 with 1 highest.  
 * If no priority is provided, the default is 1000, and the program will be 
 * attached last.
 */

message TCXAttachInfo {
    int32 priority = 1;
    string iface = 2;
    int32 position = 3;
    string direction = 4;
}

/* TracepointAttachInfo represents the program specific metadata which bpfman
 * needs to attach and observe a Tracepoint program for a given kernel
 * tracepoint.
 */
 
 message TracepointAttachInfo {
    string tracepoint = 1;
}

/* KprobeAttachInfo represents the program specific metadata which bpfman
 * needs to attach and observe a Kprobe program for a given kernel probe.
 */

message KprobeAttachInfo {
    string fn_name = 1;
    uint64 offset = 2;
    bool retprobe = 3;
    optional int32 container_pid = 4;
}

/* UprobeAttachInfo represents the program specific metadata which bpfman
 * needs to attach and observe a Uprobe program for a given user-space probe.
 */

message UprobeAttachInfo {
    optional string fn_name = 1;
    uint64 offset = 2;
    string target = 3;
    bool retprobe = 4;
    optional int32 pid = 5;
    optional int32 container_pid = 6;
}

/* FentryAttachInfo represents the program specific metadata which bpfman
 * needs to attach and observe a Fentry program for a given kernel probe.
 */

message FentryAttachInfo {
    string fn_name = 1;
}

/* FexitAttachInfo represents the program specific metadata which bpfman
 * needs to attach and observe a Fexit program for a given kernel probe.
 */

message FexitAttachInfo {
    string fn_name = 1;
}

/* Program specific parameters, mostly concerning where and how to attach
 * the eBPF program.
 */
 
message AttachInfo { 
    oneof info { 
        XDPAttachInfo xdp_attach_info = 2;
        TCAttachInfo tc_attach_info = 3;
        TracepointAttachInfo tracepoint_attach_info = 4;
        KprobeAttachInfo kprobe_attach_info = 5;
        UprobeAttachInfo uprobe_attach_info = 6;
        FentryAttachInfo fentry_attach_info = 7;
        FexitAttachInfo fexit_attach_info = 8;
        TCXAttachInfo tcx_attach_info = 9;
    }
};

/* LoadRequest represents a request to load and attach a bpf program. */

message LoadRequest {
    BytecodeLocation bytecode = 1;
    string name = 2;
    uint32 program_type = 3;
    AttachInfo attach = 4;
    map<string,string> metadata = 5;
    map<string, bytes> global_data = 6;
    optional string uuid = 7;
    optional uint32 map_owner_id = 8;
};

/* LoadResponse represents a response from loading and attaching an eBPF program. 
 * It includes all of the state kept by bpfman and the Linux kernel for the
 * program.
 */
 
 message LoadResponse {
    ProgramInfo info  = 1;
    KernelProgramInfo kernel_info = 2;
}

/* UnloadRequest represents a request to unload an eBPF program that was loaded
 * and attached by bpfman. To identify a program pass in a valid kernel ID.
 */

message UnloadRequest {
    uint32 id = 1;
}

message UnloadResponse {}

/* ListRequest represents a request to get information regarding eBPF programs
 * that are loaded and attached by bpfman AND/OR programs that are loaded by other
 * users.
 */

message ListRequest {
    optional uint32 program_type = 1;
    optional bool bpfman_programs_only = 2;
    map<string, string> match_metadata = 3;
}

/* ListResponse represents a response from listing loaded and attached
 * eBPF programs. Based on the corresponding ListRequest programs will include
 * those loaded by bpfman AND/OR those loaded by other users. The ListResults
 * will ALWAYS contain a program's kernel info and if loaded by bpfman, will
 * also contain the state kept by bpfman.
 */

message ListResponse {
  message ListResult { 
    optional ProgramInfo info = 1;
    KernelProgramInfo kernel_info = 2;
  }
  repeated ListResult results = 3;
}

/* PullBytecodeRequest represents a request to pull an eBPF program stored in an 
 * OCI container image to the local machine for use at a later date.
 */

message PullBytecodeRequest {
    BytecodeImage image = 1;
}

message PullBytecodeResponse {}

/* GetRequest represents a request to get information regarding a single
 * eBPF program that is loaded and attached by bpfman AND/OR that is loaded by
 * another user. To identify a program pass in a valid kernel ID. */

message GetRequest {
    uint32 id = 1;
}

/* GetResponse represents a response from getting an eBPF program. 
 * It will ALWAYS contain a program's kernel info and if loaded by bpfman, will
 * contain the state kept by bpfman. */

message GetResponse { 
    optional ProgramInfo info = 1;
    KernelProgramInfo kernel_info = 2;
}
