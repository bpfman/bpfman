name: build

on: # yamllint disable-line rule:truthy
  push:
    branches: [main]
    tags:
      - v*
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # Use to pin rust nightly to specific version.
  NIGHTLY_VERSION: nightly

jobs:
  check-license:
    runs-on: ubuntu-24.04
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4
      - name: Check License Header
        uses: apache/skywalking-eyes@5c5b974209f0de5d905f37deb69369068ebfc15c

  build-binaries:
    timeout-minutes: 20
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/ppc64le
          - linux/s390x
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4
      - uses: sigstore/cosign-installer@c56c2d3e59e4281cc41dea2217323ba5694b171e # @v3.8.0

      - name: Extract metadata (tags, labels) for image
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # @v5.6.1
        with:
          images: quay.io/bpfman/bpfman
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # @v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # @v3

      - name: Build Image
        id: build-push-image
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # @v6
        with:
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: Containerfile.bpfman
          context: .

  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4
      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # @v1
        with:
          toolchain: ${{ env.NIGHTLY_VERSION }}
          components: rustfmt, rust-src
          override: true
      - uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # @v2

      - uses: taiki-e/install-action@e29814c376696105d80cec9e9efaa98bae8e7347 # @v2
        with:
          tool: taplo-cli

      - name: toml-lint
        run: taplo fmt --check

      - name: yaml-lint
        run: yamllint -c .yamllint.yaml --strict .

      - name: Check C formatting
        run: git ls-files -- '*.c' '*.h' | xargs clang-format --dry-run --Werror

      - name: Check formatting
        # Only need to run once
        run: |
          cargo +${{ env.NIGHTLY_VERSION }} fmt --all -- --check

      - name: Run documentation tests
        run: |
          cargo test --doc --all-features

  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Test bpfman (${{ matrix.os }})
    steps:
      - name: Free up space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy \
            git \
            clang \
            llvm \
            protobuf-compiler \
            cmake \
            perl \
            libssl-dev \
            libelf-dev \

      - name: Checkout bpfman
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4

      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # @v1
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # @v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@ac87e9813a4968fd0c941361295f6d119b826393 # @cargo-llvm-cov

      - name: Build
        run: |
          cargo build --verbose

      - name: Run Unit Tests
        run: cargo llvm-cov test --all-features -p bpfman -p bpfman-api --lcov --output-path lcov.info
        env:
          RUST_BACKTRACE: full

      - name: Archive Rust code coverage results
        # only upload coverage for amd64 builds
        if: ${{matrix.os == 'ubuntu-24.04'}}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # @v4
        with:
          name: coverage-rust
          path: lcov.info
          if-no-files-found: error

  ## Build go modules
  build-go:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arch: amd64
            filename: linux-x86_64
          - arch: arm64
            filename: linux-arm64
          - arch: ppc64le
            filename: linux-ppc64le
          - arch: s390x
            filename: linux-s390x
    runs-on: ubuntu-24.04

    name: Build Go Modules (${{ matrix.arch.arch }})
    steps:
      - name: Checkout bpfman
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4

      - name: Install go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # @v5
        with:
          # prettier-ignore
          go-version: '1.22' # yamllint disable-line rule:quoted-strings

      - name: Go mod check
        # Only need to run go mod once, so just pick one of the arch to run on.
        if: ${{ matrix.arch.arch == 'amd64' }}
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Lint
        # Only need to lint the code once, so just pick one of the arch to run on.
        if: ${{ matrix.arch.arch == 'amd64' }}
        uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837 # @v6
        with:
          ## https://github.com/golangci/golangci-lint-action/issues/369
          version: v1.54.2
          skip-cache: true
          skip-save-cache: true
          args: -v --timeout 5m

      - name: Build Examples
        run: |
          cd examples
          GOARCH=${{ matrix.arch.arch }} make build

  basic-integration-tests:
    runs-on: ubuntu-24.04
    needs: [build-binaries, build-go]
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy \
            git \
            clang \
            llvm \
            protobuf-compiler \
            cmake \
            perl \
            libssl-dev \
            libelf-dev \
            linux-headers-`uname -r` \
            lldb \
            lld \
            libbpf-dev

      - name: Set up environment for running integration tests from manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "XDP_PASS_IMAGE_LOC=quay.io/bpfman-bytecode/xdp_pass:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TC_PASS_IMAGE_LOC=quay.io/bpfman-bytecode/tc_pass:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TRACEPOINT_IMAGE_LOC=quay.io/bpfman-bytecode/tracepoint:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "UPROBE_IMAGE_LOC=quay.io/bpfman-bytecode/uprobe:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "URETPROBE_IMAGE_LOC=quay.io/bpfman-bytecode/uretprobe:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "KPROBE_IMAGE_LOC=quay.io/bpfman-bytecode/kprobe:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "KRETPROBE_IMAGE_LOC=quay.io/bpfman-bytecode/kretprobe:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "XDP_COUNTER_IMAGE_LOC=quay.io/bpfman-bytecode/go-xdp-counter:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TC_COUNTER_IMAGE_LOC=quay.io/bpfman-bytecode/go-tc-counter:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TCX_COUNTER_IMAGE_LOC=quay.io/bpfman-bytecode/go-tcx-counter:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TRACEPOINT_COUNTER_IMAGE_LOC=quay.io/bpfman-bytecode/go-tracepoint-counter:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "FENTRY_IMAGE_LOC=quay.io/bpfman-bytecode/fentry:${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "FEXIT_IMAGE_LOC=quay.io/bpfman-bytecode/fexit:${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # @v3
        with:
          driver-opts: network=host

      - name: Checkout bpfman
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4

      - name: Checkout libbpf
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4
        with:
          repository: libbpf/libbpf
          path: libbpf
          fetch-depth: 0

      - name: Build eBPF
        run: |
          cargo xtask build-ebpf --libbpf-dir ./libbpf

      - name: Generate go wrapped eBPF
        run: |
          cd examples && make generate

      - name: Run integration tests
        run: cargo xtask integration-test

  build-docs:
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy \
            libxml2-dev \
            libxslt-dev \

      - name: Checkout bpfman
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4

      - name: Install Python3
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # @v5
        with:
          python-version: 3.x

      - name: Mkdocs Build
        run: |
          pip install mkdocs-material
          pip install -r requirements.txt
          mkdocs build --strict

  coverage:
    needs: [test, build-go]
    runs-on: ubuntu-24.04
    steps:
      - name: Download rust coverage artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # @v4
        with:
          name: coverage-rust

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # @v4
        with:
          files: ./lcov.info
          verbose: true

  # Creates Release
  # Copies built bpfman binaries to release artifacts
  # Publish's bpfman and bpfman-api crates to crates.io
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-binaries]
    environment: crates.io
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout bpfman
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # @v4

      - name: Set env
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          if [[ ${GITHUB_REF#refs/*/} =~ "rc" ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Download bpfman Release Binaries
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # @v4
        with:
          pattern: bpfman-release-*
          merge-multiple: true

      - name: release
        # Revert softprops/action-gh-release from v2.2.0 to v2.1.0 due to
        # "Error: Request body length does not match content-length header"
        # https://github.com/softprops/action-gh-release/issues/556
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # @v2
        with:
          body_path: ./changelogs/CHANGELOG-${{ env.RELEASE_VERSION }}.md
          prerelease: ${{ env.PRE_RELEASE }}
          files: |
            bpfman-linux-x86_64.tar.gz
            bpfman-linux-arm64.tar.gz
            bpfman-linux-ppc64le.tar.gz
            bpfman-linux-s390x.tar.gz

      - name: publish bpfman crate
        run: cargo publish -p bpfman --token ${{ secrets.BPFMAN_DEV_TOKEN }}

      - name: publish bpfman-api crate
        run: cargo publish -p bpfman-api --token ${{ secrets.BPFMAN_DEV_TOKEN }}

      - name: publish bpf-log-exporter crate
        run: cargo publish -p bpf-log-exporter --token ${{ secrets.BPFMAN_DEV_TOKEN }}

      - name: publish bpf-metrics-exporter crate
        run: cargo publish -p bpf-metrics-exporter --token ${{ secrets.BPFMAN_DEV_TOKEN }}

  build-workflow-complete:
    needs:
      [
        check-license,
        build-binaries,
        lint,
        test,
        build-go,
        build-docs,
        coverage,
        basic-integration-tests,
      ]
    runs-on: ubuntu-24.04
    steps:
      - name: Build Complete
        run: echo "Build Complete"
